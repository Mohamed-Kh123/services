"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1729],{11729:(e,n,t)=>{t.r(n),t.d(n,{default:()=>C});var i=t(70821),o=t(66136),a=t(18236),l=t.n(a),r=t(90521),s=t.n(r),u=t(75227),d=t.n(u),p=t(85180),c=t.n(p),f=t(25865),v=t.n(f),m=t(72965),y=t.n(m),b=t(63567),g=t.n(b),h=t(53863),w=t.n(h);t(36647),t(66593),t(52558);const F=[l(),s(),d(),c(),v(),y(),g(),w()];o.registerPlugin(...F);const O={boolean:Boolean,int:Number,number:Number,string:String,array:Array,object:Object,function:Function,serverapi:Object},T=o.OptionTypes,S={},j=[],k=o.getOptions();for(const e in T)/^on/.test(e)?j.push(e.replace("on","")):S[e]={type:(z=T[e],z?O[z]:String),default:()=>k[e]};var z;const P=(0,i.defineComponent)({name:"VFilePond",props:{...S,size:{type:String,default:void 0,validator:e=>-1!==[void 0,"small","tiny"].indexOf(e)||(console.warn(`VFilePond: invalid "${e}" size. Should be small, tiny or undefined`),!1)},model:{type:String,default:"default"}},emits:["input",...j],setup(e,{emit:n}){const t=(0,i.ref)(),a=(0,i.ref)(),l=Object.assign({},{...e});return(0,i.onMounted)((()=>{if(a.value&&o.supported()){t.value=o.create(a.value,{...l,fileValidateTypeDetectType:(e,n)=>new Promise(((e,t)=>{if(l.acceptedFileTypes){if(l.acceptedFileTypes.findIndex((e=>e===n))>-1)return void e(n)}t()}))});for(const e of j){const i=e;i&&t.value.on(i,((...i)=>{n("input",t.value?t.value.getFiles():[]),n(e,...i)}))}window.Bus.on(`addFile${e.model}`,((...e)=>t.value.addFile(...e)))}})),(0,i.onUnmounted)((()=>{if(t.value){for(const e of j){const i=e;i&&t.value.off(i,(t=>{n(e,t)}))}t.value.destroy()}})),()=>{const n=(0,i.h)("input",{type:"file",ref:a,id:l.id,name:l.name,class:l.className,required:l.required,accept:l.acceptedFileTypes,multiple:l.allowMultiple,capture:l.captureMethod}),t=(0,i.h)("div",{class:"filepond--wrapper"},[n]);return(0,i.h)("div",{class:["filepond-profile-wrap",e.size&&`is-${e.size}`]},[t])}}}),C=P}}]);