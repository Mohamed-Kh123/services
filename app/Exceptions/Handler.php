<?php

namespace App\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Modules\Core\Exceptions\AuthenticationException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
    public function render($request, Throwable $exception)
    {
//        dd($exception);
        if ($request->isJson() || $request->is('api/*')) {
            if ($exception instanceof NotFoundHttpException)
                return response()->api(ERROR_RESPONSE, trans('core::lang.route_not_found'), [], null, RESOURCE_NOT_FOUND);
            if ($exception instanceof RouteNotFoundException)
                return response()->api(ERROR_RESPONSE, trans('core::lang.not_authorized'), [], null, NOT_AUTHORIZED_ACCESS);
            else if ($exception instanceof ValidationException) {
                $errors = $exception->validator->errors();
//                prepare_error_attrs_keys($errors)
                return response()->api(ERROR_RESPONSE, $errors->first(),null , null, VALIDATION_EXCEPTION);
            } else if ($exception instanceof ModelNotFoundException) {
                return response()->api(ERROR_RESPONSE, trans('lang.resource_not_found'), [], null, RESOURCE_NOT_FOUND);
            } else if ($exception instanceof AuthenticationException) {
                return response()->api(ERROR_RESPONSE, trans('lang.unauthenticated'), null, null, UNAUTHENTICATED_ERROR);
            }
            return response()->api(ERROR_RESPONSE, $exception->getMessage(), null, $exception->getCode());
        }
        return parent::render($request, $exception); // TODO: Change the autogenerated stub
    }
}
